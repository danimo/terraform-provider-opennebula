# Visit https://goreleaser.com for documentation on how to customize this
# behavior.
before:
  hooks:
    # this is just an example and not a requirement for provider building/publishing
    - go mod tidy
    - rm -rf dist
builds:
  - env:
      # goreleaser does not work with CGO, it could also complicate
      # usage by users in CI/CD systems like Terraform Cloud where
      # they are unable to install libraries.
      - CGO_ENABLED=0
    mod_timestamp: "{{ .CommitTimestamp }}"
    flags:
      - -trimpath
    ldflags:
      - "-s -w -X main.version={{.Version}} -X main.commit={{.Commit}}"
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64
    binary: "{{ .ProjectName }}-ipv6_v{{ .Version }}"
archives:
  - format: zip
    name_template: "{{ .ProjectName }}-ipv6_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
checksum:
  name_template: "{{ .ProjectName }}-ipv6_{{ .Version }}_SHA256SUMS"
  algorithm: sha256
signs:
  - artifacts: checksum
    args:
      # if you are using this is a GitHub action or some other automated pipeline, you
      # need to pass the batch flag to indicate its not interactive.
      - "--batch"
      - "--local-user"
      - "{{ .Env.GPG_FINGERPRINT }}" # set this environment variable for your signing key
      - "--output"
      - "${signature}"
      - "--detach-sign"
      - "${artifact}"
release:
  disable: true
publishers:
  - name: copy binaries to registry directory
    checksum: true
    signature: true
    cmd: cp {{ .ArtifactPath }} registry-binaries
  - name: build registry api files
    ids: [""]
    checksum: true
    cmd: tf-provider-registry-api-generator --url https://tf-registry.infra.run/binaries --namespace opennebula --provider-release-dir ./dist/
    env:
      - GPG_FINGERPRINT={{ .Env.GPG_FINGERPRINT }}
changelog:
  skip: true
